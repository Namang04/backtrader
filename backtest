import backtrader as bt
import datetime
import numpy as np
import pandas as pd
import yfinance as yf

class BankNiftyStrategy(bt.Strategy):
    
    params = (
        ("strike_price", 35500),
        ("start_time", datetime.time(9, 47)),
        ("end_time", datetime.time(14, 47)),
        ("stop_loss_pct", 0.01),
        ("stop_loss_points", 60),
        ("capital", 1000000),
    )
    
    def __init__(self):
        self.position = None
        self.entry_time = None
        self.entry_price = None
        self.stop_loss_price = None
        self.lot_size = 25
        
        self.data.call_price = self.data.close.rolling(window=10).apply(lambda x: x[np.abs(x - self.p.strike_price).argmin()])
        self.data.put_price = self.data.close.rolling(window=10).apply(lambda x: x[np.abs(x - self.p.strike_price).argmin()])
        
    def next(self):
        current_time = self.datas[0].datetime.time()
        current_price = self.datas[0].close[0]
        
        if current_time >= self.p.start_time and current_time <= self.p.end_time:
            if self.position is None:
                if current_price == self.p.strike_price:
                    self.position = "short"
                    self.entry_time = self.datas[0].datetime.datetime(0)
                    self.entry_price = current_price
                    self.stop_loss_price = self.entry_price + self.p.stop_loss_points
            
            elif self.position == "short":
                if current_price >= self.stop_loss_price:
                    self.position = None
                    self.entry_time = None
                    self.entry_price = None
                    self.stop_loss_price = None
                
                elif current_price <= self.entry_price - self.p.stop_loss_points:
                    self.stop_loss_price = self.entry_price
                
                elif current_time == self.p.end_time:
                    self.position = None
                    self.entry_time = None
                    self.entry_price = None
                    self.stop_loss_price = None
                    
                    pnl = (self.entry_price - current_price) * self.lot_size
                    print("Trade exited at {}".format(self.datas[0].datetime.datetime(0)))
                    print("P&L: {}".format(pnl))
                    
        elif current_time == datetime.time(15, 30):
            self.stop_loss_price = max(self.entry_price - self.p.stop_loss_points, self.stop_loss_price * (1 - self.p.stop_loss_pct))

# Download the historical data for Bank Nifty
ticker = "^NSEBANK"
data = yf.download(ticker, start="2022-05-01", end="2022-05-05", interval="1m")

# Create a cerebro instance and add the strategy
cerebro = bt.Cerebro()
cerebro.addstrategy(BankNiftyStrategy)

# Add the data to cerebro
data_feed = bt.feeds.PandasData(dataname=data)
cerebro.adddata(data_feed)

# Set the initial capital and run the backtest
cerebro.broker.set_cash(1000000)
cerebro.run()
